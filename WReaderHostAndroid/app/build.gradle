apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply from: 'sign.gradle'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"
    defaultConfig {
        applicationId "wang.wangzh.wreader"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode appVersionCode.toInteger()
        versionName appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
        kotlinOptions {
            jvmTarget = "1.8"
        }
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a'
        }
    }
    // 如果有私人密钥被配置在 local.properties 中，使用签名配置
    boolean useSign = signKeyFile != null && new File(signKeyFile).exists()
    if (useSign) {
        println("Have a sign key")
        signingConfigs {
            wreader {
                storeFile file("${signKeyFile}")
                keyAlias "${signKeyAlias}"
                keyPassword "${signKeyPassword}"
                storePassword "${signStorePassword}"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            if (useSign) {
                println("release:use sign key")
                signingConfig signingConfigs.wreader
            }
        }
        debug {
            minifyEnabled false
            if (useSign) {
                println("debug:use sign key")
                signingConfig signingConfigs.wreader
            }
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if ('release' == variant.buildType.name) {
                // 输出apk名称为"wreader_${appVersionName}_release.apk"
                def fileName = "wreader_${appVersionName}_release.apk"
                outputFileName = fileName
            } else if ('debug' == variant.buildType.name) {
                // 输出apk名称为"wreader_${appVersionName}_debug.apk"
                def fileName = "wreader_${appVersionName}_debug.apk"
                outputFileName = fileName
            }
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.core:core-ktx:1.2.0'
    //依赖multidex
    implementation 'com.android.support:multidex:1.0.3'
    //依赖glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'
    //依赖flutter module
    implementation project(':flutter')
    implementation 'com.jcraft:jsch:0.1.55'
    //    def jgitVersion = '5.7.0.202003110725-r'
    //依赖jgit，改成依赖 本地 jar 包的方式
    //implementation "org.eclipse.jgit:org.eclipse.jgit:$jgitVersion"
    implementation "org.slf4j:slf4j-nop:1.7.2"
    //依赖photoView
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    //依赖gson
    implementation 'com.google.code.gson:gson:2.8.5'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.6'

}
